// Autogenerated from Pigeon (v15.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.flutter.plugins;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class EidaToolkitPlugin {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @NonNull
  protected static FlutterError createConnectionError(@NonNull String channelName) {
    return new FlutterError("channel-error",  "Unable to establish connection on channel: " + channelName + ".", "");
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  public enum FingerIndex {
    NONE(0),
    NO_MEANING(1),
    RIGHT_THUMB(2),
    RIGHT_INDEX(3),
    RIGHT_MIDDLE(4),
    RIGHT_RING(5),
    RIGHT_LITTLE(6),
    LEFT_THUMB(7),
    LEFT_INDEX(8),
    LEFT_MIDDLE(9),
    LEFT_RING(10),
    LEFT_LITTLE(11);

    final int index;

    private FingerIndex(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class FingerData {
    private @Nullable Long fingerId;

    public @Nullable Long getFingerId() {
      return fingerId;
    }

    public void setFingerId(@Nullable Long setterArg) {
      this.fingerId = setterArg;
    }

    private @Nullable FingerIndex fingerIndex;

    public @Nullable FingerIndex getFingerIndex() {
      return fingerIndex;
    }

    public void setFingerIndex(@Nullable FingerIndex setterArg) {
      this.fingerIndex = setterArg;
    }

    public static final class Builder {

      private @Nullable Long fingerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setFingerId(@Nullable Long setterArg) {
        this.fingerId = setterArg;
        return this;
      }

      private @Nullable FingerIndex fingerIndex;

      @CanIgnoreReturnValue
      public @NonNull Builder setFingerIndex(@Nullable FingerIndex setterArg) {
        this.fingerIndex = setterArg;
        return this;
      }

      public @NonNull FingerData build() {
        FingerData pigeonReturn = new FingerData();
        pigeonReturn.setFingerId(fingerId);
        pigeonReturn.setFingerIndex(fingerIndex);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(fingerId);
      toListResult.add(fingerIndex == null ? null : fingerIndex.index);
      return toListResult;
    }

    static @NonNull FingerData fromList(@NonNull ArrayList<Object> list) {
      FingerData pigeonResult = new FingerData();
      Object fingerId = list.get(0);
      pigeonResult.setFingerId((fingerId == null) ? null : ((fingerId instanceof Integer) ? (Integer) fingerId : (Long) fingerId));
      Object fingerIndex = list.get(1);
      pigeonResult.setFingerIndex(fingerIndex == null ? null : FingerIndex.values()[(int) fingerIndex]);
      return pigeonResult;
    }
  }

  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface EidaToolkitConnect {

    void connectAndInitializeF();

    void onClickCheckCardStatusF();

    void onClickLoadFingerDataF();

    void onClickFingerVerifyF(@NonNull Long fingerId, @NonNull Long fingerIndex);

    /** The codec used by EidaToolkitConnect. */
    static @NonNull MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
    /**Sets up an instance of `EidaToolkitConnect` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable EidaToolkitConnect api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitConnect.connectAndInitializeF", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.connectAndInitializeF();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitConnect.onClickCheckCardStatusF", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.onClickCheckCardStatusF();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitConnect.onClickLoadFingerDataF", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.onClickLoadFingerDataF();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitConnect.onClickFingerVerifyF", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Number fingerIdArg = (Number) args.get(0);
                Number fingerIndexArg = (Number) args.get(1);
                try {
                  api.onClickFingerVerifyF((fingerIdArg == null) ? null : fingerIdArg.longValue(), (fingerIndexArg == null) ? null : fingerIndexArg.longValue());
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class EidaToolkitDataCodec extends StandardMessageCodec {
    public static final EidaToolkitDataCodec INSTANCE = new EidaToolkitDataCodec();

    private EidaToolkitDataCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return FingerData.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof FingerData) {
        stream.write(128);
        writeValue(stream, ((FingerData) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class EidaToolkitData {
    private final @NonNull BinaryMessenger binaryMessenger;

    public EidaToolkitData(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    /** The codec used by EidaToolkitData. */
    static @NonNull MessageCodec<Object> getCodec() {
      return EidaToolkitDataCodec.INSTANCE;
    }
    public void onBiometricVerify(@Nullable Long statusArg, @Nullable String messageArg, @Nullable String vgResponseArg, @NonNull Result<Void> result) {
      final String channelName = "dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitData.onBiometricVerify";
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(statusArg, messageArg, vgResponseArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success(null);
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void statusListener(@Nullable String messageArg, @NonNull Result<Void> result) {
      final String channelName = "dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitData.statusListener";
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(messageArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success(null);
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onCardReadComplete(@Nullable Long statusArg, @Nullable String messageArg, @Nullable Map<String, String> cardPublicDataArg, @NonNull Result<Void> result) {
      final String channelName = "dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitData.onCardReadComplete";
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(statusArg, messageArg, cardPublicDataArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success(null);
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onFingerIndexFetched(@Nullable Long statusArg, @Nullable String messageArg, @Nullable List<FingerData> fingersArg, @NonNull Result<Void> result) {
      final String channelName = "dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitData.onFingerIndexFetched";
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(statusArg, messageArg, fingersArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success(null);
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onCheckCardStatus(@Nullable Long statusArg, @Nullable String messageArg, @Nullable String xmlStringArg, @NonNull Result<Void> result) {
      final String channelName = "dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitData.onCheckCardStatus";
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(statusArg, messageArg, xmlStringArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success(null);
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onToolkitConnected(@Nullable Long statusArg, @Nullable Boolean isConnectFlagArg, @Nullable String messageArg, @NonNull Result<Void> result) {
      final String channelName = "dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitData.onToolkitConnected";
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(statusArg, isConnectFlagArg, messageArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success(null);
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void onToolkitInitialized(@Nullable Boolean isSuccessfulArg, @Nullable String statusMessageArg, @NonNull Result<Void> result) {
      final String channelName = "dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitData.onToolkitInitialized";
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(isSuccessfulArg, statusMessageArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success(null);
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
  }
}
