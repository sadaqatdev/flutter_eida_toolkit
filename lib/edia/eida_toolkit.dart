// Autogenerated from Pigeon (v15.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum FingerIndex {
  NONE,
  NO_MEANING,
  RIGHT_THUMB,
  RIGHT_INDEX,
  RIGHT_MIDDLE,
  RIGHT_RING,
  RIGHT_LITTLE,
  LEFT_THUMB,
  LEFT_INDEX,
  LEFT_MIDDLE,
  LEFT_RING,
  LEFT_LITTLE,
}

class FingerData {
  FingerData({
    this.fingerId,
    this.fingerIndex,
  });

  int? fingerId;

  FingerIndex? fingerIndex;

  Object encode() {
    return <Object?>[
      fingerId,
      fingerIndex?.index,
    ];
  }

  static FingerData decode(Object result) {
    result as List<Object?>;
    return FingerData(
      fingerId: result[0] as int?,
      fingerIndex: result[1] != null
          ? FingerIndex.values[result[1]! as int]
          : null,
    );
  }
}

class EidaToolkitConnect {
  /// Constructor for [EidaToolkitConnect].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  EidaToolkitConnect({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = StandardMessageCodec();

  Future<void> connectAndInitializeF() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitConnect.connectAndInitializeF';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> onClickCheckCardStatusF() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitConnect.onClickCheckCardStatusF';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> onClickLoadFingerDataF() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitConnect.onClickLoadFingerDataF';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> onClickFingerVerifyF(int fingerId, int fingerIndex) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitConnect.onClickFingerVerifyF';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[fingerId, fingerIndex]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

class _EidaToolkitDataCodec extends StandardMessageCodec {
  const _EidaToolkitDataCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is FingerData) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return FingerData.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class EidaToolkitData {
  static const MessageCodec<Object?> pigeonChannelCodec = _EidaToolkitDataCodec();

  void onBiometricVerify(int? status, String? message, String? vgResponse);

  void statusListener(String? message);

  void onCardReadComplete(int? status, String? message, Map<String?, String?>? cardPublicData);

  void onFingerIndexFetched(int? status, String? message, List<FingerData?>? fingers);

  void onCheckCardStatus(int? status, String? message, String? xmlString);

  void onToolkitConnected(int? status, bool? isConnectFlag, String? message);

  void onToolkitInitialized(bool? isSuccessful, String? statusMessage);

  static void setup(EidaToolkitData? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitData.onBiometricVerify', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitData.onBiometricVerify was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_status = (args[0] as int?);
          final String? arg_message = (args[1] as String?);
          final String? arg_vgResponse = (args[2] as String?);
          try {
            api.onBiometricVerify(arg_status, arg_message, arg_vgResponse);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitData.statusListener', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitData.statusListener was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_message = (args[0] as String?);
          try {
            api.statusListener(arg_message);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitData.onCardReadComplete', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitData.onCardReadComplete was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_status = (args[0] as int?);
          final String? arg_message = (args[1] as String?);
          final Map<String?, String?>? arg_cardPublicData = (args[2] as Map<Object?, Object?>?)?.cast<String?, String?>();
          try {
            api.onCardReadComplete(arg_status, arg_message, arg_cardPublicData);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitData.onFingerIndexFetched', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitData.onFingerIndexFetched was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_status = (args[0] as int?);
          final String? arg_message = (args[1] as String?);
          final List<FingerData?>? arg_fingers = (args[2] as List<Object?>?)?.cast<FingerData?>();
          try {
            api.onFingerIndexFetched(arg_status, arg_message, arg_fingers);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitData.onCheckCardStatus', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitData.onCheckCardStatus was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_status = (args[0] as int?);
          final String? arg_message = (args[1] as String?);
          final String? arg_xmlString = (args[2] as String?);
          try {
            api.onCheckCardStatus(arg_status, arg_message, arg_xmlString);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitData.onToolkitConnected', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitData.onToolkitConnected was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_status = (args[0] as int?);
          final bool? arg_isConnectFlag = (args[1] as bool?);
          final String? arg_message = (args[2] as String?);
          try {
            api.onToolkitConnected(arg_status, arg_isConnectFlag, arg_message);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitData.onToolkitInitialized', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_eida_toolkit.EidaToolkitData.onToolkitInitialized was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_isSuccessful = (args[0] as bool?);
          final String? arg_statusMessage = (args[1] as String?);
          try {
            api.onToolkitInitialized(arg_isSuccessful, arg_statusMessage);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
